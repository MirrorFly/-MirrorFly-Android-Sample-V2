// Generated by view binder compiler. Do not edit!
package com.contusfly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.contusfly.R;
import com.contusfly.views.CustomTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentBottomSheetOtpBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CustomTextView cancel;

  @NonNull
  public final LinearLayout otpLayout;

  @NonNull
  public final OtpViewBinding otpview;

  @NonNull
  public final CustomTextView resendOtp;

  @NonNull
  public final CustomTextView verifyOtp;

  private FragmentBottomSheetOtpBinding(@NonNull LinearLayout rootView,
      @NonNull CustomTextView cancel, @NonNull LinearLayout otpLayout,
      @NonNull OtpViewBinding otpview, @NonNull CustomTextView resendOtp,
      @NonNull CustomTextView verifyOtp) {
    this.rootView = rootView;
    this.cancel = cancel;
    this.otpLayout = otpLayout;
    this.otpview = otpview;
    this.resendOtp = resendOtp;
    this.verifyOtp = verifyOtp;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentBottomSheetOtpBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentBottomSheetOtpBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_bottom_sheet_otp, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentBottomSheetOtpBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cancel;
      CustomTextView cancel = ViewBindings.findChildViewById(rootView, id);
      if (cancel == null) {
        break missingId;
      }

      id = R.id.otp_layout;
      LinearLayout otpLayout = ViewBindings.findChildViewById(rootView, id);
      if (otpLayout == null) {
        break missingId;
      }

      id = R.id.otpview;
      View otpview = ViewBindings.findChildViewById(rootView, id);
      if (otpview == null) {
        break missingId;
      }
      OtpViewBinding binding_otpview = OtpViewBinding.bind(otpview);

      id = R.id.resend_otp;
      CustomTextView resendOtp = ViewBindings.findChildViewById(rootView, id);
      if (resendOtp == null) {
        break missingId;
      }

      id = R.id.verify_otp;
      CustomTextView verifyOtp = ViewBindings.findChildViewById(rootView, id);
      if (verifyOtp == null) {
        break missingId;
      }

      return new FragmentBottomSheetOtpBinding((LinearLayout) rootView, cancel, otpLayout,
          binding_otpview, resendOtp, verifyOtp);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
