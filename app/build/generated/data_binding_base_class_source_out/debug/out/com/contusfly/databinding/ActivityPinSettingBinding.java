// Generated by view binder compiler. Do not edit!
package com.contusfly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.SwitchCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.contusfly.R;
import com.contusfly.views.CustomTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPinSettingBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final SwitchCompat biometricTogglePin;

  @NonNull
  public final LinearLayout changePinLayout;

  @NonNull
  public final LinearLayout layout;

  @NonNull
  public final RelativeLayout layoutDeleteAccount;

  @NonNull
  public final LinearLayout llFingerPrint;

  @NonNull
  public final View llFingerPrintView;

  @NonNull
  public final TextView pinMessageText;

  @NonNull
  public final LinearLayout setChangePinLayout;

  @NonNull
  public final LinearLayout setPinLayout;

  @NonNull
  public final SwitchCompat togglePin;

  @NonNull
  public final CommonToolbarBinding toolBar;

  @NonNull
  public final CustomTextView txtTitle;

  private ActivityPinSettingBinding(@NonNull RelativeLayout rootView,
      @NonNull SwitchCompat biometricTogglePin, @NonNull LinearLayout changePinLayout,
      @NonNull LinearLayout layout, @NonNull RelativeLayout layoutDeleteAccount,
      @NonNull LinearLayout llFingerPrint, @NonNull View llFingerPrintView,
      @NonNull TextView pinMessageText, @NonNull LinearLayout setChangePinLayout,
      @NonNull LinearLayout setPinLayout, @NonNull SwitchCompat togglePin,
      @NonNull CommonToolbarBinding toolBar, @NonNull CustomTextView txtTitle) {
    this.rootView = rootView;
    this.biometricTogglePin = biometricTogglePin;
    this.changePinLayout = changePinLayout;
    this.layout = layout;
    this.layoutDeleteAccount = layoutDeleteAccount;
    this.llFingerPrint = llFingerPrint;
    this.llFingerPrintView = llFingerPrintView;
    this.pinMessageText = pinMessageText;
    this.setChangePinLayout = setChangePinLayout;
    this.setPinLayout = setPinLayout;
    this.togglePin = togglePin;
    this.toolBar = toolBar;
    this.txtTitle = txtTitle;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPinSettingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPinSettingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_pin_setting, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPinSettingBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.biometric_toggle_pin;
      SwitchCompat biometricTogglePin = ViewBindings.findChildViewById(rootView, id);
      if (biometricTogglePin == null) {
        break missingId;
      }

      id = R.id.change_pin_layout;
      LinearLayout changePinLayout = ViewBindings.findChildViewById(rootView, id);
      if (changePinLayout == null) {
        break missingId;
      }

      id = R.id.layout;
      LinearLayout layout = ViewBindings.findChildViewById(rootView, id);
      if (layout == null) {
        break missingId;
      }

      id = R.id.layout_delete_account;
      RelativeLayout layoutDeleteAccount = ViewBindings.findChildViewById(rootView, id);
      if (layoutDeleteAccount == null) {
        break missingId;
      }

      id = R.id.ll_finger_print;
      LinearLayout llFingerPrint = ViewBindings.findChildViewById(rootView, id);
      if (llFingerPrint == null) {
        break missingId;
      }

      id = R.id.ll_finger_print_view;
      View llFingerPrintView = ViewBindings.findChildViewById(rootView, id);
      if (llFingerPrintView == null) {
        break missingId;
      }

      id = R.id.pin_message_text;
      TextView pinMessageText = ViewBindings.findChildViewById(rootView, id);
      if (pinMessageText == null) {
        break missingId;
      }

      id = R.id.set_change_pin_layout;
      LinearLayout setChangePinLayout = ViewBindings.findChildViewById(rootView, id);
      if (setChangePinLayout == null) {
        break missingId;
      }

      id = R.id.set_pin_layout;
      LinearLayout setPinLayout = ViewBindings.findChildViewById(rootView, id);
      if (setPinLayout == null) {
        break missingId;
      }

      id = R.id.toggle_pin;
      SwitchCompat togglePin = ViewBindings.findChildViewById(rootView, id);
      if (togglePin == null) {
        break missingId;
      }

      id = R.id.tool_bar;
      View toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }
      CommonToolbarBinding binding_toolBar = CommonToolbarBinding.bind(toolBar);

      id = R.id.txt_title;
      CustomTextView txtTitle = ViewBindings.findChildViewById(rootView, id);
      if (txtTitle == null) {
        break missingId;
      }

      return new ActivityPinSettingBinding((RelativeLayout) rootView, biometricTogglePin,
          changePinLayout, layout, layoutDeleteAccount, llFingerPrint, llFingerPrintView,
          pinMessageText, setChangePinLayout, setPinLayout, togglePin, binding_toolBar, txtTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
