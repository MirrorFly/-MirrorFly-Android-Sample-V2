// Generated by view binder compiler. Do not edit!
package com.contusfly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.contusfly.R;
import com.contusfly.views.CircularImageView;
import com.contusfly.views.CustomTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RowSearchContactMessageBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CircularImageView emailContactIcon;

  @NonNull
  public final CustomTextView headerSearchRecent;

  @NonNull
  public final ConstraintLayout profilepicView;

  @NonNull
  public final CircularImageView searchImageContact;

  @NonNull
  public final ImageView searchImageRecentChatStatus;

  @NonNull
  public final ImageView searchImageRecentChatType;

  @NonNull
  public final LinearLayout searchMessageInfoLayout;

  @NonNull
  public final ImageView searchPin;

  @NonNull
  public final RelativeLayout searchRecentItem;

  @NonNull
  public final LinearLayout searchRecentStatus;

  @NonNull
  public final CustomTextView searchTextArchive;

  @NonNull
  public final CustomTextView searchTextChatPerson;

  @NonNull
  public final CustomTextView searchTextGroupPerson;

  @NonNull
  public final CustomTextView searchTextRecentChatmsg;

  @NonNull
  public final CustomTextView searchTextRecentchatTime;

  @NonNull
  public final CustomTextView searchTextUnseenCount;

  @NonNull
  public final LinearLayout viewSearchHeader;

  private RowSearchContactMessageBinding(@NonNull LinearLayout rootView,
      @NonNull CircularImageView emailContactIcon, @NonNull CustomTextView headerSearchRecent,
      @NonNull ConstraintLayout profilepicView, @NonNull CircularImageView searchImageContact,
      @NonNull ImageView searchImageRecentChatStatus, @NonNull ImageView searchImageRecentChatType,
      @NonNull LinearLayout searchMessageInfoLayout, @NonNull ImageView searchPin,
      @NonNull RelativeLayout searchRecentItem, @NonNull LinearLayout searchRecentStatus,
      @NonNull CustomTextView searchTextArchive, @NonNull CustomTextView searchTextChatPerson,
      @NonNull CustomTextView searchTextGroupPerson,
      @NonNull CustomTextView searchTextRecentChatmsg,
      @NonNull CustomTextView searchTextRecentchatTime,
      @NonNull CustomTextView searchTextUnseenCount, @NonNull LinearLayout viewSearchHeader) {
    this.rootView = rootView;
    this.emailContactIcon = emailContactIcon;
    this.headerSearchRecent = headerSearchRecent;
    this.profilepicView = profilepicView;
    this.searchImageContact = searchImageContact;
    this.searchImageRecentChatStatus = searchImageRecentChatStatus;
    this.searchImageRecentChatType = searchImageRecentChatType;
    this.searchMessageInfoLayout = searchMessageInfoLayout;
    this.searchPin = searchPin;
    this.searchRecentItem = searchRecentItem;
    this.searchRecentStatus = searchRecentStatus;
    this.searchTextArchive = searchTextArchive;
    this.searchTextChatPerson = searchTextChatPerson;
    this.searchTextGroupPerson = searchTextGroupPerson;
    this.searchTextRecentChatmsg = searchTextRecentChatmsg;
    this.searchTextRecentchatTime = searchTextRecentchatTime;
    this.searchTextUnseenCount = searchTextUnseenCount;
    this.viewSearchHeader = viewSearchHeader;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RowSearchContactMessageBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowSearchContactMessageBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_search_contact_message, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowSearchContactMessageBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.email_contact_icon;
      CircularImageView emailContactIcon = ViewBindings.findChildViewById(rootView, id);
      if (emailContactIcon == null) {
        break missingId;
      }

      id = R.id.header_search_recent;
      CustomTextView headerSearchRecent = ViewBindings.findChildViewById(rootView, id);
      if (headerSearchRecent == null) {
        break missingId;
      }

      id = R.id.profilepic_view;
      ConstraintLayout profilepicView = ViewBindings.findChildViewById(rootView, id);
      if (profilepicView == null) {
        break missingId;
      }

      id = R.id.search_image_contact;
      CircularImageView searchImageContact = ViewBindings.findChildViewById(rootView, id);
      if (searchImageContact == null) {
        break missingId;
      }

      id = R.id.search_image_recent_chat_status;
      ImageView searchImageRecentChatStatus = ViewBindings.findChildViewById(rootView, id);
      if (searchImageRecentChatStatus == null) {
        break missingId;
      }

      id = R.id.search_image_recent_chat_type;
      ImageView searchImageRecentChatType = ViewBindings.findChildViewById(rootView, id);
      if (searchImageRecentChatType == null) {
        break missingId;
      }

      id = R.id.search_message_info_layout;
      LinearLayout searchMessageInfoLayout = ViewBindings.findChildViewById(rootView, id);
      if (searchMessageInfoLayout == null) {
        break missingId;
      }

      id = R.id.search_pin;
      ImageView searchPin = ViewBindings.findChildViewById(rootView, id);
      if (searchPin == null) {
        break missingId;
      }

      id = R.id.search_recent_item;
      RelativeLayout searchRecentItem = ViewBindings.findChildViewById(rootView, id);
      if (searchRecentItem == null) {
        break missingId;
      }

      id = R.id.search_recent_status;
      LinearLayout searchRecentStatus = ViewBindings.findChildViewById(rootView, id);
      if (searchRecentStatus == null) {
        break missingId;
      }

      id = R.id.search_text_archive;
      CustomTextView searchTextArchive = ViewBindings.findChildViewById(rootView, id);
      if (searchTextArchive == null) {
        break missingId;
      }

      id = R.id.search_text_chat_person;
      CustomTextView searchTextChatPerson = ViewBindings.findChildViewById(rootView, id);
      if (searchTextChatPerson == null) {
        break missingId;
      }

      id = R.id.search_text_group_person;
      CustomTextView searchTextGroupPerson = ViewBindings.findChildViewById(rootView, id);
      if (searchTextGroupPerson == null) {
        break missingId;
      }

      id = R.id.search_text_recent_chatmsg;
      CustomTextView searchTextRecentChatmsg = ViewBindings.findChildViewById(rootView, id);
      if (searchTextRecentChatmsg == null) {
        break missingId;
      }

      id = R.id.search_text_recentchat_time;
      CustomTextView searchTextRecentchatTime = ViewBindings.findChildViewById(rootView, id);
      if (searchTextRecentchatTime == null) {
        break missingId;
      }

      id = R.id.search_text_unseen_count;
      CustomTextView searchTextUnseenCount = ViewBindings.findChildViewById(rootView, id);
      if (searchTextUnseenCount == null) {
        break missingId;
      }

      id = R.id.view_search_header;
      LinearLayout viewSearchHeader = ViewBindings.findChildViewById(rootView, id);
      if (viewSearchHeader == null) {
        break missingId;
      }

      return new RowSearchContactMessageBinding((LinearLayout) rootView, emailContactIcon,
          headerSearchRecent, profilepicView, searchImageContact, searchImageRecentChatStatus,
          searchImageRecentChatType, searchMessageInfoLayout, searchPin, searchRecentItem,
          searchRecentStatus, searchTextArchive, searchTextChatPerson, searchTextGroupPerson,
          searchTextRecentChatmsg, searchTextRecentchatTime, searchTextUnseenCount,
          viewSearchHeader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
