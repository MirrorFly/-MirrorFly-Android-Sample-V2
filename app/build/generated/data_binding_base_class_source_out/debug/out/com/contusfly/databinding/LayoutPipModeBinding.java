// Generated by view binder compiler. Do not edit!
package com.contusfly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.contus.call.SpeakingIndicatorView;
import com.contusfly.R;
import com.contusfly.views.CustomTextView;
import com.mirrorflysdk.flycall.webrtc.TextureViewRenderer;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class LayoutPipModeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RelativeLayout callerStatusLayout;

  @NonNull
  public final TextView callerStatusTextView;

  @NonNull
  public final LinearLayout layoutPipMode;

  @NonNull
  public final RelativeLayout participantStatusLayout;

  @NonNull
  public final TextView participantStatusTextView;

  @NonNull
  public final CustomTextView participantsCount;

  @NonNull
  public final RelativeLayout remoteUsersLayout;

  @NonNull
  public final TextView userProfileName;

  @NonNull
  public final TextView userProfileName1;

  @NonNull
  public final ImageView userProfilePic;

  @NonNull
  public final ImageView userProfilePic1;

  @NonNull
  public final TextureViewRenderer userVideoSurface;

  @NonNull
  public final TextureViewRenderer userVideoSurface1;

  @NonNull
  public final SpeakingIndicatorView viewSpeakingIndicator;

  @NonNull
  public final SpeakingIndicatorView viewSpeakingIndicator1;

  private LayoutPipModeBinding(@NonNull LinearLayout rootView,
      @NonNull RelativeLayout callerStatusLayout, @NonNull TextView callerStatusTextView,
      @NonNull LinearLayout layoutPipMode, @NonNull RelativeLayout participantStatusLayout,
      @NonNull TextView participantStatusTextView, @NonNull CustomTextView participantsCount,
      @NonNull RelativeLayout remoteUsersLayout, @NonNull TextView userProfileName,
      @NonNull TextView userProfileName1, @NonNull ImageView userProfilePic,
      @NonNull ImageView userProfilePic1, @NonNull TextureViewRenderer userVideoSurface,
      @NonNull TextureViewRenderer userVideoSurface1,
      @NonNull SpeakingIndicatorView viewSpeakingIndicator,
      @NonNull SpeakingIndicatorView viewSpeakingIndicator1) {
    this.rootView = rootView;
    this.callerStatusLayout = callerStatusLayout;
    this.callerStatusTextView = callerStatusTextView;
    this.layoutPipMode = layoutPipMode;
    this.participantStatusLayout = participantStatusLayout;
    this.participantStatusTextView = participantStatusTextView;
    this.participantsCount = participantsCount;
    this.remoteUsersLayout = remoteUsersLayout;
    this.userProfileName = userProfileName;
    this.userProfileName1 = userProfileName1;
    this.userProfilePic = userProfilePic;
    this.userProfilePic1 = userProfilePic1;
    this.userVideoSurface = userVideoSurface;
    this.userVideoSurface1 = userVideoSurface1;
    this.viewSpeakingIndicator = viewSpeakingIndicator;
    this.viewSpeakingIndicator1 = viewSpeakingIndicator1;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static LayoutPipModeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static LayoutPipModeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.layout_pip_mode, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static LayoutPipModeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.caller_status_layout;
      RelativeLayout callerStatusLayout = ViewBindings.findChildViewById(rootView, id);
      if (callerStatusLayout == null) {
        break missingId;
      }

      id = R.id.caller_status_text_view;
      TextView callerStatusTextView = ViewBindings.findChildViewById(rootView, id);
      if (callerStatusTextView == null) {
        break missingId;
      }

      LinearLayout layoutPipMode = (LinearLayout) rootView;

      id = R.id.participant_status_layout;
      RelativeLayout participantStatusLayout = ViewBindings.findChildViewById(rootView, id);
      if (participantStatusLayout == null) {
        break missingId;
      }

      id = R.id.participant_status_text_view;
      TextView participantStatusTextView = ViewBindings.findChildViewById(rootView, id);
      if (participantStatusTextView == null) {
        break missingId;
      }

      id = R.id.participants_count;
      CustomTextView participantsCount = ViewBindings.findChildViewById(rootView, id);
      if (participantsCount == null) {
        break missingId;
      }

      id = R.id.remote_users_layout;
      RelativeLayout remoteUsersLayout = ViewBindings.findChildViewById(rootView, id);
      if (remoteUsersLayout == null) {
        break missingId;
      }

      id = R.id.user_profile_name;
      TextView userProfileName = ViewBindings.findChildViewById(rootView, id);
      if (userProfileName == null) {
        break missingId;
      }

      id = R.id.user_profile_name1;
      TextView userProfileName1 = ViewBindings.findChildViewById(rootView, id);
      if (userProfileName1 == null) {
        break missingId;
      }

      id = R.id.user_profile_pic;
      ImageView userProfilePic = ViewBindings.findChildViewById(rootView, id);
      if (userProfilePic == null) {
        break missingId;
      }

      id = R.id.user_profile_pic1;
      ImageView userProfilePic1 = ViewBindings.findChildViewById(rootView, id);
      if (userProfilePic1 == null) {
        break missingId;
      }

      id = R.id.user_video_surface;
      TextureViewRenderer userVideoSurface = ViewBindings.findChildViewById(rootView, id);
      if (userVideoSurface == null) {
        break missingId;
      }

      id = R.id.user_video_surface1;
      TextureViewRenderer userVideoSurface1 = ViewBindings.findChildViewById(rootView, id);
      if (userVideoSurface1 == null) {
        break missingId;
      }

      id = R.id.view_speaking_indicator;
      SpeakingIndicatorView viewSpeakingIndicator = ViewBindings.findChildViewById(rootView, id);
      if (viewSpeakingIndicator == null) {
        break missingId;
      }

      id = R.id.view_speaking_indicator1;
      SpeakingIndicatorView viewSpeakingIndicator1 = ViewBindings.findChildViewById(rootView, id);
      if (viewSpeakingIndicator1 == null) {
        break missingId;
      }

      return new LayoutPipModeBinding((LinearLayout) rootView, callerStatusLayout,
          callerStatusTextView, layoutPipMode, participantStatusLayout, participantStatusTextView,
          participantsCount, remoteUsersLayout, userProfileName, userProfileName1, userProfilePic,
          userProfilePic1, userVideoSurface, userVideoSurface1, viewSpeakingIndicator,
          viewSpeakingIndicator1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
