// Generated by view binder compiler. Do not edit!
package com.contusfly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.contusfly.R;
import com.contusfly.views.CustomTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPinEntryChangeBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final AppCompatEditText confirmPin;

  @NonNull
  public final LinearLayout confirmPinLayout;

  @NonNull
  public final LinearLayout newPinLayout;

  @NonNull
  public final LinearLayout oldLayout;

  @NonNull
  public final AppCompatEditText oldPin;

  @NonNull
  public final LinearLayout otpLayout;

  @NonNull
  public final CustomTextView resendOtp;

  @NonNull
  public final AppCompatTextView saveBtn;

  @NonNull
  public final AppCompatEditText setPin;

  @NonNull
  public final CommonToolbarBinding toolBar;

  private ActivityPinEntryChangeBinding(@NonNull RelativeLayout rootView,
      @NonNull AppCompatEditText confirmPin, @NonNull LinearLayout confirmPinLayout,
      @NonNull LinearLayout newPinLayout, @NonNull LinearLayout oldLayout,
      @NonNull AppCompatEditText oldPin, @NonNull LinearLayout otpLayout,
      @NonNull CustomTextView resendOtp, @NonNull AppCompatTextView saveBtn,
      @NonNull AppCompatEditText setPin, @NonNull CommonToolbarBinding toolBar) {
    this.rootView = rootView;
    this.confirmPin = confirmPin;
    this.confirmPinLayout = confirmPinLayout;
    this.newPinLayout = newPinLayout;
    this.oldLayout = oldLayout;
    this.oldPin = oldPin;
    this.otpLayout = otpLayout;
    this.resendOtp = resendOtp;
    this.saveBtn = saveBtn;
    this.setPin = setPin;
    this.toolBar = toolBar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPinEntryChangeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPinEntryChangeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_pin_entry_change, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPinEntryChangeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.confirm_pin;
      AppCompatEditText confirmPin = ViewBindings.findChildViewById(rootView, id);
      if (confirmPin == null) {
        break missingId;
      }

      id = R.id.confirmPin_layout;
      LinearLayout confirmPinLayout = ViewBindings.findChildViewById(rootView, id);
      if (confirmPinLayout == null) {
        break missingId;
      }

      id = R.id.newPin_layout;
      LinearLayout newPinLayout = ViewBindings.findChildViewById(rootView, id);
      if (newPinLayout == null) {
        break missingId;
      }

      id = R.id.old_layout;
      LinearLayout oldLayout = ViewBindings.findChildViewById(rootView, id);
      if (oldLayout == null) {
        break missingId;
      }

      id = R.id.old_pin;
      AppCompatEditText oldPin = ViewBindings.findChildViewById(rootView, id);
      if (oldPin == null) {
        break missingId;
      }

      id = R.id.otp_layout;
      LinearLayout otpLayout = ViewBindings.findChildViewById(rootView, id);
      if (otpLayout == null) {
        break missingId;
      }

      id = R.id.resend_otp;
      CustomTextView resendOtp = ViewBindings.findChildViewById(rootView, id);
      if (resendOtp == null) {
        break missingId;
      }

      id = R.id.save_btn;
      AppCompatTextView saveBtn = ViewBindings.findChildViewById(rootView, id);
      if (saveBtn == null) {
        break missingId;
      }

      id = R.id.set_pin;
      AppCompatEditText setPin = ViewBindings.findChildViewById(rootView, id);
      if (setPin == null) {
        break missingId;
      }

      id = R.id.tool_bar;
      View toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }
      CommonToolbarBinding binding_toolBar = CommonToolbarBinding.bind(toolBar);

      return new ActivityPinEntryChangeBinding((RelativeLayout) rootView, confirmPin,
          confirmPinLayout, newPinLayout, oldLayout, oldPin, otpLayout, resendOtp, saveBtn, setPin,
          binding_toolBar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
