// Generated by view binder compiler. Do not edit!
package com.contusfly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatEditText;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.contusfly.R;
import com.contusfly.views.CustomTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityCommonEditorBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView_;

  @NonNull
  public final ConstraintLayout constrain;

  @NonNull
  public final AppCompatEditText editStatus;

  @NonNull
  public final ConstraintLayout emojicons;

  @NonNull
  public final ImageView imageSmiley;

  @NonNull
  public final ConstraintLayout rootView;

  @NonNull
  public final TextView statusCount;

  @NonNull
  public final CustomTextView textCancel;

  @NonNull
  public final CustomTextView textOk;

  @NonNull
  public final CommonToolbarBinding toolBar;

  @NonNull
  public final LinearLayout viewEditor;

  @NonNull
  public final LinearLayout viewFooter;

  private ActivityCommonEditorBinding(@NonNull ConstraintLayout rootView_,
      @NonNull ConstraintLayout constrain, @NonNull AppCompatEditText editStatus,
      @NonNull ConstraintLayout emojicons, @NonNull ImageView imageSmiley,
      @NonNull ConstraintLayout rootView, @NonNull TextView statusCount,
      @NonNull CustomTextView textCancel, @NonNull CustomTextView textOk,
      @NonNull CommonToolbarBinding toolBar, @NonNull LinearLayout viewEditor,
      @NonNull LinearLayout viewFooter) {
    this.rootView_ = rootView_;
    this.constrain = constrain;
    this.editStatus = editStatus;
    this.emojicons = emojicons;
    this.imageSmiley = imageSmiley;
    this.rootView = rootView;
    this.statusCount = statusCount;
    this.textCancel = textCancel;
    this.textOk = textOk;
    this.toolBar = toolBar;
    this.viewEditor = viewEditor;
    this.viewFooter = viewFooter;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView_;
  }

  @NonNull
  public static ActivityCommonEditorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCommonEditorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_common_editor, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCommonEditorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.constrain;
      ConstraintLayout constrain = ViewBindings.findChildViewById(rootView, id);
      if (constrain == null) {
        break missingId;
      }

      id = R.id.edit_status;
      AppCompatEditText editStatus = ViewBindings.findChildViewById(rootView, id);
      if (editStatus == null) {
        break missingId;
      }

      id = R.id.emojicons;
      ConstraintLayout emojicons = ViewBindings.findChildViewById(rootView, id);
      if (emojicons == null) {
        break missingId;
      }

      id = R.id.image_smiley;
      ImageView imageSmiley = ViewBindings.findChildViewById(rootView, id);
      if (imageSmiley == null) {
        break missingId;
      }

      id = R.id.root_view;
      ConstraintLayout rootView_ = ViewBindings.findChildViewById(rootView, id);
      if (rootView_ == null) {
        break missingId;
      }

      id = R.id.status_count;
      TextView statusCount = ViewBindings.findChildViewById(rootView, id);
      if (statusCount == null) {
        break missingId;
      }

      id = R.id.text_cancel;
      CustomTextView textCancel = ViewBindings.findChildViewById(rootView, id);
      if (textCancel == null) {
        break missingId;
      }

      id = R.id.text_ok;
      CustomTextView textOk = ViewBindings.findChildViewById(rootView, id);
      if (textOk == null) {
        break missingId;
      }

      id = R.id.tool_bar;
      View toolBar = ViewBindings.findChildViewById(rootView, id);
      if (toolBar == null) {
        break missingId;
      }
      CommonToolbarBinding binding_toolBar = CommonToolbarBinding.bind(toolBar);

      id = R.id.view_editor;
      LinearLayout viewEditor = ViewBindings.findChildViewById(rootView, id);
      if (viewEditor == null) {
        break missingId;
      }

      id = R.id.view_footer;
      LinearLayout viewFooter = ViewBindings.findChildViewById(rootView, id);
      if (viewFooter == null) {
        break missingId;
      }

      return new ActivityCommonEditorBinding((ConstraintLayout) rootView, constrain, editStatus,
          emojicons, imageSmiley, rootView_, statusCount, textCancel, textOk, binding_toolBar,
          viewEditor, viewFooter);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
