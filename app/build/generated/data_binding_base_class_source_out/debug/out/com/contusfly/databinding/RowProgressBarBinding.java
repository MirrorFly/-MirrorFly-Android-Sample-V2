// Generated by view binder compiler. Do not edit!
package com.contusfly.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.contusfly.R;
import com.contusfly.views.CustomTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RowProgressBarBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final CustomTextView headerSectionTextView;

  @NonNull
  public final ProgressBar loadMoreProgress;

  @NonNull
  public final LinearLayout viewSectionHeader;

  private RowProgressBarBinding(@NonNull ConstraintLayout rootView,
      @NonNull CustomTextView headerSectionTextView, @NonNull ProgressBar loadMoreProgress,
      @NonNull LinearLayout viewSectionHeader) {
    this.rootView = rootView;
    this.headerSectionTextView = headerSectionTextView;
    this.loadMoreProgress = loadMoreProgress;
    this.viewSectionHeader = viewSectionHeader;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RowProgressBarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RowProgressBarBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.row_progress_bar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RowProgressBarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.header_section_text_View;
      CustomTextView headerSectionTextView = ViewBindings.findChildViewById(rootView, id);
      if (headerSectionTextView == null) {
        break missingId;
      }

      id = R.id.load_more_progress;
      ProgressBar loadMoreProgress = ViewBindings.findChildViewById(rootView, id);
      if (loadMoreProgress == null) {
        break missingId;
      }

      id = R.id.view_section_header;
      LinearLayout viewSectionHeader = ViewBindings.findChildViewById(rootView, id);
      if (viewSectionHeader == null) {
        break missingId;
      }

      return new RowProgressBarBinding((ConstraintLayout) rootView, headerSectionTextView,
          loadMoreProgress, viewSectionHeader);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
