// Generated by Dagger (https://dagger.dev).
package com.contusfly.call.groupcall;

import com.contusfly.di.factory.AppViewModelFactory;
import com.mirrorflysdk.flynetwork.ApiCalls;
import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AddParticipantFragment_MembersInjector implements MembersInjector<AddParticipantFragment> {
  private final Provider<AppViewModelFactory> callViewModelFactoryProvider;

  private final Provider<ApiCalls> apiCallsProvider;

  public AddParticipantFragment_MembersInjector(
      Provider<AppViewModelFactory> callViewModelFactoryProvider,
      Provider<ApiCalls> apiCallsProvider) {
    this.callViewModelFactoryProvider = callViewModelFactoryProvider;
    this.apiCallsProvider = apiCallsProvider;
  }

  public static MembersInjector<AddParticipantFragment> create(
      Provider<AppViewModelFactory> callViewModelFactoryProvider,
      Provider<ApiCalls> apiCallsProvider) {
    return new AddParticipantFragment_MembersInjector(callViewModelFactoryProvider, apiCallsProvider);
  }

  @Override
  public void injectMembers(AddParticipantFragment instance) {
    injectCallViewModelFactory(instance, callViewModelFactoryProvider.get());
    injectApiCalls(instance, apiCallsProvider.get());
  }

  @InjectedFieldSignature("com.contusfly.call.groupcall.AddParticipantFragment.callViewModelFactory")
  public static void injectCallViewModelFactory(AddParticipantFragment instance,
      AppViewModelFactory callViewModelFactory) {
    instance.callViewModelFactory = callViewModelFactory;
  }

  @InjectedFieldSignature("com.contusfly.call.groupcall.AddParticipantFragment.apiCalls")
  public static void injectApiCalls(AddParticipantFragment instance, ApiCalls apiCalls) {
    instance.apiCalls = apiCalls;
  }
}
