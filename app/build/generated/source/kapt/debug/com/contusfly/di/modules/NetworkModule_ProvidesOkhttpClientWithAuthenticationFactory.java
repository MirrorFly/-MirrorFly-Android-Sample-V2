// Generated by Dagger (https://dagger.dev).
package com.contusfly.di.modules;

import com.facebook.stetho.okhttp3.StethoInterceptor;
import com.mirrorflysdk.flycommons.RequestTokenInterceptor;
import com.mirrorflysdk.flycommons.TokenAuthenticator;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesOkhttpClientWithAuthenticationFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<OkHttpClient.Builder> okhttpBuilderProvider;

  private final Provider<StethoInterceptor> stethoInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  private final Provider<RequestTokenInterceptor> requestTokenInterceptorProvider;

  private final Provider<TokenAuthenticator> tokenAuthenticatorProvider;

  public NetworkModule_ProvidesOkhttpClientWithAuthenticationFactory(NetworkModule module,
      Provider<OkHttpClient.Builder> okhttpBuilderProvider,
      Provider<StethoInterceptor> stethoInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<RequestTokenInterceptor> requestTokenInterceptorProvider,
      Provider<TokenAuthenticator> tokenAuthenticatorProvider) {
    this.module = module;
    this.okhttpBuilderProvider = okhttpBuilderProvider;
    this.stethoInterceptorProvider = stethoInterceptorProvider;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.requestTokenInterceptorProvider = requestTokenInterceptorProvider;
    this.tokenAuthenticatorProvider = tokenAuthenticatorProvider;
  }

  @Override
  public OkHttpClient get() {
    return providesOkhttpClientWithAuthentication(module, okhttpBuilderProvider.get(), stethoInterceptorProvider.get(), loggingInterceptorProvider.get(), requestTokenInterceptorProvider.get(), tokenAuthenticatorProvider.get());
  }

  public static NetworkModule_ProvidesOkhttpClientWithAuthenticationFactory create(
      NetworkModule module, Provider<OkHttpClient.Builder> okhttpBuilderProvider,
      Provider<StethoInterceptor> stethoInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<RequestTokenInterceptor> requestTokenInterceptorProvider,
      Provider<TokenAuthenticator> tokenAuthenticatorProvider) {
    return new NetworkModule_ProvidesOkhttpClientWithAuthenticationFactory(module, okhttpBuilderProvider, stethoInterceptorProvider, loggingInterceptorProvider, requestTokenInterceptorProvider, tokenAuthenticatorProvider);
  }

  public static OkHttpClient providesOkhttpClientWithAuthentication(NetworkModule instance,
      OkHttpClient.Builder okhttpBuilder, StethoInterceptor stethoInterceptor,
      HttpLoggingInterceptor loggingInterceptor, RequestTokenInterceptor requestTokenInterceptor,
      TokenAuthenticator tokenAuthenticator) {
    return Preconditions.checkNotNullFromProvides(instance.providesOkhttpClientWithAuthentication(okhttpBuilder, stethoInterceptor, loggingInterceptor, requestTokenInterceptor, tokenAuthenticator));
  }
}
