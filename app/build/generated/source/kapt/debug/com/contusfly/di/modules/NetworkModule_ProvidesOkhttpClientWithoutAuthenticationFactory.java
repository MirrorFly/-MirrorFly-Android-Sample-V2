// Generated by Dagger (https://dagger.dev).
package com.contusfly.di.modules;

import com.facebook.stetho.okhttp3.StethoInterceptor;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesOkhttpClientWithoutAuthenticationFactory implements Factory<OkHttpClient> {
  private final NetworkModule module;

  private final Provider<OkHttpClient.Builder> okhttpBuilderProvider;

  private final Provider<StethoInterceptor> stethoInterceptorProvider;

  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  public NetworkModule_ProvidesOkhttpClientWithoutAuthenticationFactory(NetworkModule module,
      Provider<OkHttpClient.Builder> okhttpBuilderProvider,
      Provider<StethoInterceptor> stethoInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider) {
    this.module = module;
    this.okhttpBuilderProvider = okhttpBuilderProvider;
    this.stethoInterceptorProvider = stethoInterceptorProvider;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return providesOkhttpClientWithoutAuthentication(module, okhttpBuilderProvider.get(), stethoInterceptorProvider.get(), loggingInterceptorProvider.get());
  }

  public static NetworkModule_ProvidesOkhttpClientWithoutAuthenticationFactory create(
      NetworkModule module, Provider<OkHttpClient.Builder> okhttpBuilderProvider,
      Provider<StethoInterceptor> stethoInterceptorProvider,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider) {
    return new NetworkModule_ProvidesOkhttpClientWithoutAuthenticationFactory(module, okhttpBuilderProvider, stethoInterceptorProvider, loggingInterceptorProvider);
  }

  public static OkHttpClient providesOkhttpClientWithoutAuthentication(NetworkModule instance,
      OkHttpClient.Builder okhttpBuilder, StethoInterceptor stethoInterceptor,
      HttpLoggingInterceptor loggingInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.providesOkhttpClientWithoutAuthentication(okhttpBuilder, stethoInterceptor, loggingInterceptor));
  }
}
