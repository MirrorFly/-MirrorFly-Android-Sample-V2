// Generated by Dagger (https://dagger.dev).
package com.contusfly.di.modules;

import com.mirrorflysdk.flynetwork.ApiCalls;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesRApiCallsWithAuthenticationFactory implements Factory<ApiCalls> {
  private final NetworkModule module;

  private final Provider<Retrofit> retrofitProvider;

  public NetworkModule_ProvidesRApiCallsWithAuthenticationFactory(NetworkModule module,
      Provider<Retrofit> retrofitProvider) {
    this.module = module;
    this.retrofitProvider = retrofitProvider;
  }

  @Override
  public ApiCalls get() {
    return providesRApiCallsWithAuthentication(module, retrofitProvider.get());
  }

  public static NetworkModule_ProvidesRApiCallsWithAuthenticationFactory create(
      NetworkModule module, Provider<Retrofit> retrofitProvider) {
    return new NetworkModule_ProvidesRApiCallsWithAuthenticationFactory(module, retrofitProvider);
  }

  public static ApiCalls providesRApiCallsWithAuthentication(NetworkModule instance,
      Retrofit retrofit) {
    return Preconditions.checkNotNullFromProvides(instance.providesRApiCallsWithAuthentication(retrofit));
  }
}
